@startuml

' ========================
' CLASS DIAGRAM
' ========================
package "TriangulationLibrary" {

  class PolyhedronMesh <<Object>> {
    ' + Attributi
    + + int NumCell0Ds
    + + vector<int> Cell0DsId
    + + MatrixXd Cell0DsCoordinates
    
    + + int NumCell1Ds
    + + vector<int> Cell1DsId
    + + MatrixXi Cell1DsExtrema
    
    + + int NumCell2Ds
    + + vector<int> Cell2DsId
    + + vector<vector<int>> Cell2DsVertices
    + + vector<vector<int>> Cell2DsEdges
    + + vector<int> Cell2DsNumVertices
    + + vector<int> Cell2DsNumEdges
    
    + + int NumCell3Ds
    + + vector<int> Cell3DsId
    + + vector<int> Cell3DsNumVertices
    + + vector<int> Cell3DsNumEdges
    + + vector<int> Cell3DsNumFaces
    + + vector<vector<int>> Cell3DsVertices
    + + vector<vector<int>> Cell3DsEdges
    + + vector<vector<int>> Cell3DsFaces
  }

  class FileManagement <<Library>> {
    ' # Metodi
    # ImportPolyhedronMesh()
    # ImportCell0Ds()
    # ImportCell1Ds()
    # ImportCell2Ds()
    # ExportOutputFiles()
  }

  class Generation <<Library>> {
    # GeodeticSolidType1()
    # GeodeticSolidType2()
    # Dual()
    # ShortestPath()
  }

  class Utils <<Library>> {
    # OrderFaces()
    # CheckDuplicatesVertex()
    # CheckDuplicatesEdge()
    # ProjectionOnSphere()
  }

  ' ===== RELAZIONI (dipendenze bidirezionali) =====
  PolyhedronMesh --> FileManagement
  PolyhedronMesh --> Generation
  PolyhedronMesh --> Utils
  FileManagement --> PolyhedronMesh
  Generation --> PolyhedronMesh
  Utils --> PolyhedronMesh
}
@enduml